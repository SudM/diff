#!/usr/bin/env python3
import json
import argparse
from pathlib import Path
from typing import Any, Dict, List, Optional

CSS = """
<style>
  body { font-family: system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; margin:24px; line-height:1.5; }
  h1,h2,h3 { margin-top:0; }
  .section { border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:16px; }
  table { width:100%; border-collapse:collapse; margin-top:8px; }
  th, td { border:1px solid #eee; padding:8px; text-align:left; vertical-align:top; }
  th { background:#f7f7f7; }
  code, pre { background:#f9f9f9; padding:2px 6px; border-radius:6px; }
  .small { color:#666; font-size:13px; }

  tr.status-added    { background:#e7f7ed; }  /* green */
  tr.status-deleted  { background:#fde7e7; }  /* red */
  tr.status-modified { background:#fff7e6; }  /* yellow */

  pre.json-raw { background:#f9f9ff; border:1px dashed #ddd; border-radius:10px; padding:10px; overflow:auto; }

  .value-diff { color:#ff0000; font-weight:700; }
  .missing    { color:#ff0000; font-weight:700; }
</style>
"""

def load_json(path: Path) -> Any:
    return json.loads(path.read_text(encoding="utf-8"))

def dicts_by_class(items: List[Dict[str, Any]]) -> Dict[str, Dict[str, Any]]:
    """Index objects by their 'class' key"""
    out: Dict[str, Dict[str, Any]] = {}
    for it in items or []:
        if isinstance(it, dict) and "class" in it:
            out[str(it["class"])] = it
    return out

def build_report(v1_path: Path, v2_path: Path) -> str:
    j1 = load_json(v1_path)
    j2 = load_json(v2_path)

    v1_map = dicts_by_class(j1)
    v2_map = dicts_by_class(j2)

    added   = sorted(set(v2_map) - set(v1_map))
    deleted = sorted(set(v1_map) - set(v2_map))
    common  = sorted(set(v1_map) & set(v2_map))

    parts: List[str] = [
        "<!DOCTYPE html><html lang='en'><head><meta charset='utf-8'>",
        "<title>Class JSON Diff Report</title>",
        CSS,
        "</head><body>",
        "<h1>Class JSON Diff Report</h1>",
        "<div class='section'><h2>Summary</h2><ul>"
    ]

    parts.append(f"<li><b>Classes in {v1_path.name}</b>: {len(v1_map)}</li>")
    parts.append(f"<li><b>Classes in {v2_path.name}</b>: {len(v2_map)}</li>")
    parts.append(f"<li><b>Added</b>: {len(added)} / <b>Deleted</b>: {len(deleted)} / <b>Modified</b>: {0}</li>")

    parts.append(f"</ul><div class='small'>Compared files: <code>{v1_path.name}</code> and <code>{v2_path.name}</code></div></div>")

    # Table for class differences
    parts.append("<div class='section'><h2>Class Comparison</h2>")
    parts.append("<table><tr><th>Group</th><th>Status</th><th>Class</th>"
                 f"<th>{v1_path.name}</th><th>{v2_path.name}</th></tr>")

    # Added
    for cls in added:
        block = json.dumps(v2_map[cls], indent=2)
        parts.append(f"<tr class='status-added'><td>class</td><td>Added</td><td><code>{cls}</code></td><td></td>"
                     f"<td><pre class='json-raw'>{block}</pre></td></tr>")

    # Deleted
    for cls in deleted:
        block = json.dumps(v1_map[cls], indent=2)
        parts.append(f"<tr class='status-deleted'><td>class</td><td>Deleted</td><td><code>{cls}</code></td>"
                     f"<td><pre class='json-raw'>{block}</pre></td><td></td></tr>")

    # Modified check (deep compare)
    for cls in common:
        if v1_map[cls] != v2_map[cls]:
            block1 = json.dumps(v1_map[cls], indent=2)
            block2 = json.dumps(v2_map[cls], indent=2)
            parts.append(f"<tr class='status-modified'><td>class</td><td>Modified</td><td><code>{cls}</code></td>"
                         f"<td><pre class='json-raw'>{block1}</pre></td><td><pre class='json-raw'>{block2}</pre></td></tr>")

    parts.append("</table></div>")
    parts.append("</body></html>")
    return "".join(parts)

def main():
    parser = argparse.ArgumentParser(description="Compare JSON files at class level and output HTML diff.")
    parser.add_argument("v1", type=Path, help="First JSON file")
    parser.add_argument("v2", type=Path, help="Second JSON file")
    parser.add_argument("-o", "--output", type=Path, default=Path("Class_Diff_Report.html"), help="Output HTML file")
    args = parser.parse_args()

    html = build_report(args.v1, args.v2)
    args.output.write_text(html, encoding="utf-8")
    print("âœ… Report saved to:", args.output.resolve())

if __name__ == "__main__":
    main()
